<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11" defer></script>
</head>

<body class="bg-gradient-to-br from-green-50 to-white min-h-screen flex items-center justify-center p-4">
  <div class="w-full max-w-lg bg-white shadow-lg rounded-2xl p-8">
    <h1 class="text-2xl font-bold text-green-700 text-center mb-6"><%= pageTitle %></h1>

    <form id="faceSwapForm" enctype="multipart/form-data" class="space-y-4">
      <!-- Name -->
      <div>
        <label class="block text-sm font-medium text-green-800">Name</label>
        <input type="text" name="name" required minlength="4" maxlength="30"
          class="mt-1 block w-full border border-green-200 rounded-lg p-2 focus:ring-2 focus:ring-green-400 focus:outline-none" />
      </div>

      <!-- Email -->
      <div>
        <label class="block text-sm font-medium text-green-800">Email</label>
        <input type="email" name="email" required
          class="mt-1 block w-full border border-green-200 rounded-lg p-2 focus:ring-2 focus:ring-green-400 focus:outline-none" />
      </div>

      <!-- Phone -->
      <div>
        <label class="block text-sm font-medium text-green-800">Phone</label>
        <input type="text" name="phone" pattern="\d{10}" required
          class="mt-1 block w-full border border-green-200 rounded-lg p-2 focus:ring-2 focus:ring-green-400 focus:outline-none" />
      </div>

      <!-- Input Image -->
      <div>
        <label class="block text-sm font-medium text-green-800">Input Image</label>
        <input type="file" name="inputImage" accept="image/*" required
          class="mt-1 block w-full text-sm text-green-700 file:mr-3 file:py-2 file:px-4 file:rounded-lg file:border-0 file:bg-green-100 file:text-green-800 hover:file:bg-green-200 cursor-pointer" />
        <img id="inputPreview" class="hidden mt-3 rounded-lg shadow-md max-w-full max-h-48 border border-green-200"
          alt="Input Preview">
      </div>

      <!-- Style Image -->
      <div>
        <label class="block text-sm font-medium text-green-800">Style Image (Optional)</label>
        <input type="file" name="styleImage" accept="image/*"
          class="mt-1 block w-full text-sm text-green-700 file:mr-3 file:py-2 file:px-4 file:rounded-lg file:border-0 file:bg-green-100 file:text-green-800 hover:file:bg-green-200 cursor-pointer" />
        <img id="stylePreview" class="hidden mt-3 rounded-lg shadow-md max-w-full max-h-48 border border-green-200"
          alt="Style Preview">
      </div>

      <!-- Terms -->
      <div class="flex items-center">
        <input type="checkbox" name="terms" value="true" id="termsCheckbox" required
          class="h-4 w-4 text-green-600 border-green-300 rounded focus:ring-green-500" />
        <label for="termsCheckbox" class="ml-2 text-sm text-green-900">I accept Terms & Conditions</label>
      </div>

      <!-- Submit -->
      <button type="submit"
        class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition">
        Submit
      </button>
    </form>
  </div>

  <!-- Result Modal -->
  <div id="resultModal"
    class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
    <div class="bg-white rounded-2xl shadow-lg max-w-md w-full p-6 relative text-center">
      <span id="closeModal"
        class="absolute top-3 right-4 text-gray-500 text-2xl font-bold cursor-pointer hover:text-gray-700">&times;</span>
      <h2 class="text-xl font-bold text-green-700">üòé Look Who‚Äôs Fancy Now!</h2>
      <p id="modalMessage" class="mt-2 text-gray-700"></p>
      <img id="modalSwappedImg"
        class="mt-4 rounded-lg shadow-md max-h-64 mx-auto border border-green-200" alt="Swapped Image">
      <p id="modalRecommendations" class="mt-2 text-sm text-red-500"></p>
      <button id="modalDownloadBtn"
        class="mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition">
        Download Image
      </button>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const form = document.getElementById("faceSwapForm");
      const inputImage = form.querySelector('input[name="inputImage"]');
      const styleImage = form.querySelector('input[name="styleImage"]');
      const inputPreview = document.getElementById("inputPreview");
      const stylePreview = document.getElementById("stylePreview");
      const termsCheckbox = document.getElementById("termsCheckbox");

      const modal = document.getElementById("resultModal");
      const closeModal = document.getElementById("closeModal");
      const modalMessage = document.getElementById("modalMessage");
      const modalSwappedImg = document.getElementById("modalSwappedImg");
      const modalRecommendations = document.getElementById("modalRecommendations");
      const modalDownloadBtn = document.getElementById("modalDownloadBtn");

      // Image preview
      function readAndPreview(fileInput, previewImg) {
        if (fileInput.files && fileInput.files[0]) {
          const reader = new FileReader();
          reader.onload = e => {
            previewImg.src = e.target.result;
            previewImg.classList.remove("hidden");
          };
          reader.readAsDataURL(fileInput.files[0]);
        }
      }

      inputImage.addEventListener("change", () => readAndPreview(inputImage, inputPreview));
      styleImage.addEventListener("change", () => readAndPreview(styleImage, stylePreview));

      // Close modal
      closeModal.addEventListener("click", () => {
        modal.classList.add("hidden");
        modalSwappedImg.src = "";
        modalMessage.textContent = "";
        modalRecommendations.textContent = "";
      });

      // Submit form via fetch
      form.addEventListener("submit", async e => {
        e.preventDefault();

        if (!termsCheckbox.checked) {
          Swal.fire("Error ‚ùå", "Please accept the Terms & Conditions", "error");
          return;
        }

        const formData = new FormData(form);

        try {
          Swal.fire({
            title: "Processing...",
            text: "Please wait while we swap the face ü§ñ",
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
          });

          const res = await fetch("/submit", { method: "POST", body: formData });
          const data = await res.json();
          Swal.close();

          if (!res.ok || !data.success) {
            Swal.fire("Error ‚ùå", data.error || "Something went wrong!", "error");
            return;
          }

          // Reset form and previews
          form.reset();
          inputPreview.classList.add("hidden");
          stylePreview.classList.add("hidden");

          // Show result modal
          modal.classList.remove("hidden");
          modalMessage.textContent = data.message || "Face swap complete!";
          if (data.swappedImgURL) {
            modalSwappedImg.src = data.swappedImgURL;
            modalDownloadBtn.onclick = () => {
              const link = document.createElement("a");
              link.href = data.swappedImgURL;
              link.download = "swapped_image.jpg";
              document.body.appendChild(link);
              link.click();
              link.remove();
            };
          }
          if (data.recommendations?.length) {
            modalRecommendations.textContent = "‚ö†Ô∏è " + data.recommendations.join(", ");
          }
        } catch (err) {
          Swal.close();
          Swal.fire("Network Error ‚ùå", "Please try again later", "error");
          console.error(err);
        }
      });
    });
  </script>
</body>

</html>
